//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SandFilter.SFilterWP {
    using System.Web;
    using System.Text.RegularExpressions;
    using Microsoft.SharePoint.WebPartPages;
    using Microsoft.SharePoint.WebControls;
    using System.Web.Security;
    using Microsoft.SharePoint.Utilities;
    using System.Web.UI;
    using System;
    using System.Web.UI.WebControls;
    using System.Collections.Specialized;
    using Microsoft.SharePoint;
    using System.Collections;
    using System.Web.Profile;
    using System.Text;
    using System.Web.Caching;
    using System.Configuration;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.SessionState;
    using System.Web.UI.HtmlControls;
    using System.CodeDom.Compiler;
    
    
    public partial class SFilterWP {
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.DropDownList DdlListFields;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.DropDownList DdlLogicalOperator;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.DropDownList DdlComparisonOperator;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.TextBox TbSearchText;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.TextBox TextSearchToDate;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.HiddenField HidJsonObject;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.HiddenField HidSPListName;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.HiddenField HidSiteRestUrl;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.HiddenField HidCamlQuery;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.HiddenField HidSPViewName;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected global::System.Web.UI.WebControls.HiddenField HidCurrentViewID;
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebPartCodeGenerator", "12.0.0.0")]
        public static implicit operator global::System.Web.UI.TemplateControl(SFilterWP target) 
        {
            return target == null ? null : target.TemplateControl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control3() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__BuildControl__control2(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            @__ctrl1 = this.@__BuildControl__control3();
            @__ctrl.Add(@__ctrl1);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDdlListFields() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            this.DdlListFields = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            @__ctrl.ID = "DdlListFields";
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("onchange", "DdlListFields_OnChange(this)");
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("data-native-menu", "true");
            this.@__BuildControl__control2(@__ctrl.Items);
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control5() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control6() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "and";
            @__ctrl.Text = "And";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control7() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "or";
            @__ctrl.Text = "Or";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__BuildControl__control4(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            @__ctrl1 = this.@__BuildControl__control5();
            @__ctrl.Add(@__ctrl1);
            global::System.Web.UI.WebControls.ListItem @__ctrl2;
            @__ctrl2 = this.@__BuildControl__control6();
            @__ctrl.Add(@__ctrl2);
            global::System.Web.UI.WebControls.ListItem @__ctrl3;
            @__ctrl3 = this.@__BuildControl__control7();
            @__ctrl.Add(@__ctrl3);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDdlLogicalOperator() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            this.DdlLogicalOperator = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            @__ctrl.ID = "DdlLogicalOperator";
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("onchange", "DdlLogicalOperator_OnChange(this)");
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("data-native-menu", "true");
            this.@__BuildControl__control4(@__ctrl.Items);
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control9() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control10() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "beginswith";
            @__ctrl.Text = "Begins With";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control11() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "contains";
            @__ctrl.Text = "Contains";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control12() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "daterange";
            @__ctrl.Text = "Date Range";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control13() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "daterangesoverlap";
            @__ctrl.Text = "Date Ranges Overlap";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control14() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "eq";
            @__ctrl.Text = "Equal";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control15() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "gt";
            @__ctrl.Text = "Greater Than";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control16() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "geq";
            @__ctrl.Text = "Greater Than or Equal";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control17() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "lt";
            @__ctrl.Text = "Less Than";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control18() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            @__ctrl.Value = "leq";
            @__ctrl.Text = "Less Than or Equal";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__BuildControl__control8(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            @__ctrl1 = this.@__BuildControl__control9();
            @__ctrl.Add(@__ctrl1);
            global::System.Web.UI.WebControls.ListItem @__ctrl2;
            @__ctrl2 = this.@__BuildControl__control10();
            @__ctrl.Add(@__ctrl2);
            global::System.Web.UI.WebControls.ListItem @__ctrl3;
            @__ctrl3 = this.@__BuildControl__control11();
            @__ctrl.Add(@__ctrl3);
            global::System.Web.UI.WebControls.ListItem @__ctrl4;
            @__ctrl4 = this.@__BuildControl__control12();
            @__ctrl.Add(@__ctrl4);
            global::System.Web.UI.WebControls.ListItem @__ctrl5;
            @__ctrl5 = this.@__BuildControl__control13();
            @__ctrl.Add(@__ctrl5);
            global::System.Web.UI.WebControls.ListItem @__ctrl6;
            @__ctrl6 = this.@__BuildControl__control14();
            @__ctrl.Add(@__ctrl6);
            global::System.Web.UI.WebControls.ListItem @__ctrl7;
            @__ctrl7 = this.@__BuildControl__control15();
            @__ctrl.Add(@__ctrl7);
            global::System.Web.UI.WebControls.ListItem @__ctrl8;
            @__ctrl8 = this.@__BuildControl__control16();
            @__ctrl.Add(@__ctrl8);
            global::System.Web.UI.WebControls.ListItem @__ctrl9;
            @__ctrl9 = this.@__BuildControl__control17();
            @__ctrl.Add(@__ctrl9);
            global::System.Web.UI.WebControls.ListItem @__ctrl10;
            @__ctrl10 = this.@__BuildControl__control18();
            @__ctrl.Add(@__ctrl10);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDdlComparisonOperator() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            this.DdlComparisonOperator = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            @__ctrl.ID = "DdlComparisonOperator";
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("onchange", "DdlComparisonOperator_OnChange(this)");
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("title", "Comparison operator");
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("data-native-menu", "true");
            this.@__BuildControl__control8(@__ctrl.Items);
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlTbSearchText() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            this.TbSearchText = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            @__ctrl.ID = "TbSearchText";
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(140, System.Web.UI.WebControls.UnitType.Pixel);
            @__ctrl.MaxLength = 1000;
            @__ctrl.Enabled = false;
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlTextSearchToDate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            this.TextSearchToDate = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            @__ctrl.ID = "TextSearchToDate";
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(140, System.Web.UI.WebControls.UnitType.Pixel);
            @__ctrl.MaxLength = 1000;
            @__ctrl.Enabled = false;
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.HiddenField @__BuildControlHidJsonObject() {
            global::System.Web.UI.WebControls.HiddenField @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.HiddenField();
            this.HidJsonObject = @__ctrl;
            @__ctrl.ID = "HidJsonObject";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.HiddenField @__BuildControlHidSPListName() {
            global::System.Web.UI.WebControls.HiddenField @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.HiddenField();
            this.HidSPListName = @__ctrl;
            @__ctrl.ID = "HidSPListName";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.HiddenField @__BuildControlHidSiteRestUrl() {
            global::System.Web.UI.WebControls.HiddenField @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.HiddenField();
            this.HidSiteRestUrl = @__ctrl;
            @__ctrl.ID = "HidSiteRestUrl";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.HiddenField @__BuildControlHidCamlQuery() {
            global::System.Web.UI.WebControls.HiddenField @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.HiddenField();
            this.HidCamlQuery = @__ctrl;
            @__ctrl.ID = "HidCamlQuery";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.HiddenField @__BuildControlHidSPViewName() {
            global::System.Web.UI.WebControls.HiddenField @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.HiddenField();
            this.HidSPViewName = @__ctrl;
            @__ctrl.ID = "HidSPViewName";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private global::System.Web.UI.WebControls.HiddenField @__BuildControlHidCurrentViewID() {
            global::System.Web.UI.WebControls.HiddenField @__ctrl;
            @__ctrl = new global::System.Web.UI.WebControls.HiddenField();
            this.HidCurrentViewID = @__ctrl;
            @__ctrl.ID = "HidCurrentViewID";
            return @__ctrl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__BuildControlTree(global::SandFilter.SFilterWP.SFilterWP @__ctrl) {
            global::System.Web.UI.WebControls.DropDownList @__ctrl1;
            @__ctrl1 = this.@__BuildControlDdlListFields();
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            @__parser.AddParsedSubObject(@__ctrl1);
            global::System.Web.UI.WebControls.DropDownList @__ctrl2;
            @__ctrl2 = this.@__BuildControlDdlLogicalOperator();
            @__parser.AddParsedSubObject(@__ctrl2);
            global::System.Web.UI.WebControls.DropDownList @__ctrl3;
            @__ctrl3 = this.@__BuildControlDdlComparisonOperator();
            @__parser.AddParsedSubObject(@__ctrl3);
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            @__ctrl4 = this.@__BuildControlTbSearchText();
            @__parser.AddParsedSubObject(@__ctrl4);
            global::System.Web.UI.WebControls.TextBox @__ctrl5;
            @__ctrl5 = this.@__BuildControlTextSearchToDate();
            @__parser.AddParsedSubObject(@__ctrl5);
            global::System.Web.UI.WebControls.HiddenField @__ctrl6;
            @__ctrl6 = this.@__BuildControlHidJsonObject();
            @__parser.AddParsedSubObject(@__ctrl6);
            global::System.Web.UI.WebControls.HiddenField @__ctrl7;
            @__ctrl7 = this.@__BuildControlHidSPListName();
            @__parser.AddParsedSubObject(@__ctrl7);
            global::System.Web.UI.WebControls.HiddenField @__ctrl8;
            @__ctrl8 = this.@__BuildControlHidSiteRestUrl();
            @__parser.AddParsedSubObject(@__ctrl8);
            global::System.Web.UI.WebControls.HiddenField @__ctrl9;
            @__ctrl9 = this.@__BuildControlHidCamlQuery();
            @__parser.AddParsedSubObject(@__ctrl9);
            global::System.Web.UI.WebControls.HiddenField @__ctrl10;
            @__ctrl10 = this.@__BuildControlHidSPViewName();
            @__parser.AddParsedSubObject(@__ctrl10);
            global::System.Web.UI.WebControls.HiddenField @__ctrl11;
            @__ctrl11 = this.@__BuildControlHidCurrentViewID();
            @__parser.AddParsedSubObject(@__ctrl11);
            @__ctrl.SetRenderMethodDelegate(new System.Web.UI.RenderMethod(this.@__Render__control1));
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__Render__control1(System.Web.UI.HtmlTextWriter @__w, System.Web.UI.Control parameterContainer) {
   if (false)
   { 
            @__w.Write("\r\n<script type=\"text/javascript\" src=\"/_layouts/MicrosoftAjax.js\" ></script>\r\n<sc" +
                    "ript type=\"text/javascript\" src=\"/_layouts/SP.debug.js\" ></script>\r\n<script type" +
                    "=\"text/javascript\" src=\"/_layouts/1033/init.debug.js\" ></script>\r\n");
   } 
            @__w.Write("\r\n<!-- Start of MY application -->\r\n<!-- Remove the \'..\' part when dragged from S" +
                    "olution Explorer. -->\r\n<link href=\"/Content/themes/base/all.css\" rel=\"stylesheet" +
                    "\" />\r\n<link href=\"/Content/themes/redmond/jquery-ui.redmond.min.css\" rel=\"styles" +
                    "heet\" />\r\n<script type=\"text/javascript\">\r\n    //console.log(\'START jQuery versi" +
                    "on: \' + $.fn.jquery);\r\n    var jQLoaded\r\n    if (window.jQuery) {\r\n        jQLoa" +
                    "ded = $.noConflict(true); //Deconflict jquery versions if already loaded.\r\n    }" +
                    "     \r\n</script>\r\n<!-- Remove the \'..\' part when dragged from Solution Explorer " +
                    "for it to reference properly. -->\r\n<script type=\"text/javascript\" src=\"/Scripts/" +
                    "jquery-1.6.4.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"/Scripts/jqu" +
                    "ery-ui.min-1.11.1.js\"></script>\r\n<script type=\"text/javascript\" src=\"/Scripts/ca" +
                    "mljs.js\"></script>\r\n<script type=\"text/javascript\">\r\n    //console.log(\'REPLACED" +
                    " jQuery version: \' + $.fn.jquery + \'; jQueryUI version: \' + $.ui.version);\r\n</sc" +
                    "ript>\r\n<style type=\"text/css\">\r\n    .auto-style-container {\r\n        width: 4px;" +
                    "        \r\n    } \r\n    .overflow { height: 300px; }           \r\n</style>\r\n<style " +
                    "class=\"ui-selectmenu-optgroup\">\r\n  .ui-autocomplete {\r\n    max-height: 700px;\r\n " +
                    "   overflow-y: auto;\r\n    /* prevent horizontal scrollbar */\r\n    overflow-x: hi" +
                    "dden;\r\n  }\r\n  /* IE 6 doesn\'t support max-height\r\n   * we use height instead, bu" +
                    "t this forces the menu to always be this tall\r\n   */\r\n  * html .ui-autocomplete " +
                    "{\r\n    height: 700px;\r\n  }\r\n  /*Configure jQuery UI select menu button height*/\r" +
                    "\n  .ui-selectmenu-button {\r\n      max-height: 20px;                 \r\n  }\r\n  /*j" +
                    "Query UI Widget font adjust*/\r\n  .ui-widget {\r\n      font: inherit;\r\n      font-" +
                    "size: 11px;      \r\n  } \r\n  .ui-textfield {\r\n      height: 18px;\r\n      font: inh" +
                    "erit;\r\n      font-size: 12px;                      \r\n  } \r\n  /*Align command but" +
                    "tons*/\r\n  .ui-button {\r\n      height: 20px;\r\n      width: 29px;\r\n      margin-le" +
                    "ft: 1px;\r\n      margin-top: 1px;\r\n      margin-bottom: 3px;        \r\n  }\r\n  /*Al" +
                    "ign datepicker trigger button*/\r\n  .ui-datepicker-trigger {\r\n      margin-left: " +
                    "1px;\r\n      margin-top: 1px;\r\n      margin-bottom: 3px;\r\n  } \r\n  /*Align labels*" +
                    "/\r\n  label {\r\n    float: left;\r\n    width: auto;\r\n    margin-top: 3px;\r\n  }  \r\n<" +
                    "/style>\r\n<table id=\"TableSandFilter\" hidden=\"hidden\">\r\n    <tr>        \r\n       " +
                    " <td>\r\n            <div id=\"DivListFields\">\r\n                <label for=\"DdlList" +
                    "Fields\" title=\"Select a field\">\r\n                    Field: </label>");
            parameterContainer.Controls[0].RenderControl(@__w);
            @__w.Write(@"
            </div>
        </td>
        <td>
        </td>
        <td>
            <div id=""DivLogicalPerator"">
                <label for=""DdlLogicalOperator"" title=""Select a logic operator"">
                    Logic: </label>
                ");
            parameterContainer.Controls[1].RenderControl(@__w);
            @__w.Write("\r\n            </div>\r\n        </td>\r\n        <td>\r\n        </td>\r\n        <td>\r\n " +
                    "           <div id=\"DivComparisonOperator\">\r\n                <label for=\"DdlComp" +
                    "arisonOperator\">\r\n                    Operator: </label>\r\n                ");
            parameterContainer.Controls[2].RenderControl(@__w);
            @__w.Write(@"
            </div>            
        </td>
        <td>
        </td>
        <td>
            <div class=""ui-front"">
                <label for=""TbSearchText"" id=""lblTbSearchText"" title=""Type a value for auto-complete"">
                    Value:
                </label>
                ");
            parameterContainer.Controls[3].RenderControl(@__w);
            @__w.Write(@"
            </div>
        </td>
        <td>
            <div id=""DivTextSearchToDate"" hidden=""hidden"" class=""ui-front"">
                <label for=""TextSearchToDate"", id=""lblTextSearchToDate"" title=""Type a second value for auto-complete"">
                    To:
                </label>
                ");
            parameterContainer.Controls[4].RenderControl(@__w);
            @__w.Write("\r\n            </div>\r\n        </td>\r\n        <td>\r\n            <div style=\"text-a" +
                    "lign: center\">\r\n                <button type=\"button\" id=\"ButtonClientSideSearch" +
                    "\" title=\"Search with filter\" value=\"Search\"></button><button type=\"button\" id=\"B" +
                    "uttonClientSideClear\" title=\"Clear filter\" value=\"Clear\"></button></div>\r\n      " +
                    "  </td>\r\n    </tr>\r\n    </table>\r\n\r\n<script type=\"text/javascript\">\r\n    $(docum" +
                    "ent).ready(function () {       \r\n\r\n        SP.SOD.executeOrDelayUntilScriptLoade" +
                    "d(getViewById, \'sp.js\');        \r\n\r\n        var ids = getIds();\r\n        Process" +
                    "FieldTypeChange(ids);\r\n        \r\n        $(\'#\' + ids.clIdDdlListFields).selectme" +
                    "nu({\r\n            open: function (event, ui) {\r\n                $(\'li.ui-menu-it" +
                    "em\').tooltip({\r\n                    items: \'li\',\r\n                    content: f" +
                    "unction () {\r\n                        var tTip = ($(this).html().replace(/&nbsp;" +
                    "/g, \'\'));\r\n                        return tTip;\r\n                    }\r\n        " +
                    "        });\r\n            },\r\n            change: function ( event, ui ) {\r\n     " +
                    "           DdlListFields_OnChange(this);\r\n            },\r\n            appendTo: " +
                    "\'#\' + ids.clIdDivListFields,\r\n            width: \'auto\'\r\n        }).selectmenu(\'" +
                    "menuWidget\').addClass(\'overflow\');\r\n        $(\'#\' + ids.clIdDdlListFields + \'-bu" +
                    "tton\').attr(\'title\', \'Select a field\');\r\n\r\n        $(\'#\' + ids.clIdDdlLogicalOpe" +
                    "rator).selectmenu({            \r\n            open: function (event, ui) {\r\n     " +
                    "           $(\'li.ui-menu-item\').tooltip({\r\n                    items: \'li\',\r\n   " +
                    "                 content: function () {\r\n                        var tTip = ($(t" +
                    "his).html().replace(/&nbsp;/g, \'\'));\r\n                        return tTip;\r\n    " +
                    "                }\r\n                });\r\n            },\r\n            change: func" +
                    "tion (event, ui) {\r\n                DdlLogicalOperator_OnChange(this);\r\n        " +
                    "    },\r\n            appendTo: \'#\' + ids.clIdDivLogicalPerator,\r\n            widt" +
                    "h: \'auto\'\r\n        }).selectmenu(\'menuWidget\');\r\n        $(\'#\' + ids.clIdDdlLogi" +
                    "calOperator + \'-button\').attr(\'title\', \'Select a logic operator\');\r\n\r\n        $(" +
                    "\'#\' + ids.clIdDdlComparisonOperator).selectmenu({\r\n            open: function (e" +
                    "vent, ui) {\r\n                $(\'li.ui-menu-item\').tooltip({\r\n                   " +
                    " items: \'li\',\r\n                    content: function () {\r\n                     " +
                    "   var tTip = ($(this).html().replace(/&nbsp;/g, \'\'));\r\n                        " +
                    "return tTip;\r\n                    }\r\n                });\r\n            },\r\n      " +
                    "      change: function (event, ui) {\r\n                DdlComparisonOperator_OnCh" +
                    "ange(this);\r\n            },\r\n            appendTo: \'#\' + ids.clIdDivComparisonOp" +
                    "erator,\r\n            width: \'auto\'\r\n        }).selectmenu(\'menuWidget\');\r\n      " +
                    "  $(\'#\' + ids.clIdDdlComparisonOperator + \'-button\').attr(\'title\', \'Select a com" +
                    "parison operator\');\r\n\r\n        $(\'#\' + ids.clIdTbSearchText).addClass(\'ui-textfi" +
                    "eld ui-widget-content\'); //ui-widget ui-widget-content ui-corner-all \r\n        $" +
                    "(\'#\' + ids.clIdTextSearchToDate).addClass(\'ui-textfield ui-widget-content\');    " +
                    "                   \r\n\r\n        $(\'#\' + ids.clIdTextSearchToDate).keyup(function " +
                    "() {\r\n            OnFilterChange(ids);\r\n        });\r\n\r\n        $(\'#\' + ids.clIdT" +
                    "bSearchText).mouseup(function () {\r\n            OnClearTextButtonPressed(this);\r" +
                    "\n        });\r\n\r\n        $(\'#\' + ids.clIdTextSearchToDate).mouseup(function () {\r" +
                    "\n            OnClearTextButtonPressed(this);\r\n        });\r\n                 \r\n  " +
                    "      $(\'#\' + ids.clIdButtonClientSideSearch).button({\r\n            icons: {\r\n  " +
                    "              primary: \"ui-icon-search\"\r\n            }\r\n        }).click(functio" +
                    "n () {\r\n            OnSerchQuery(ids);\r\n        });\r\n\r\n        $(\'#\' + ids.clIdB" +
                    "uttonClientSideClear).button({\r\n            icons: {\r\n                primary: \"" +
                    "ui-icon-close\"\r\n            }\r\n        }).click(function () {            \r\n     " +
                    "       $(\'#\' + ids.clIdHidJsonObject).val(\'\');\r\n            $(\'#\' + ids.clIdHidC" +
                    "amlQuery).val(\'\');\r\n            ClearCurrentView(ids);\r\n            ClearControl" +
                    "ValuesOnChange(ids);\r\n            ClearDdlListFields(ids);              \r\n      " +
                    "  });\r\n\r\n        function OnClearTextButtonPressed(ctrl) {\r\n            var $inp" +
                    "ut = $(ctrl);\r\n            var oldValue = $input.val();\r\n            if (oldValu" +
                    "e == \'\') return;\r\n            // When this event is fired after clicking on the " +
                    "clear button, the value is not cleared yet. We have to wait for it.\r\n           " +
                    " setTimeout(function () {\r\n                var newValue = $input.val();\r\n       " +
                    "         if (newValue == \'\') {\r\n                    var keyupEvent = $.Event(\'ke" +
                    "yup\'); // Trigger the keyup event to run OnFilterChange(ids)...\r\n               " +
                    "     $input.trigger(keyupEvent);\r\n                    RemoveNotification(); //Re" +
                    "move notification if still running.\r\n                    $(\'#\' + ctrl.id).autoco" +
                    "mplete(\'close\');\r\n                }\r\n            }, 1);\r\n        }\r\n\r\n        Ex" +
                    "ecuteOrDelayUntilBodyLoaded(delayShowAfterBody);\r\n        function delayShowAfte" +
                    "rBody() {\r\n            $(\'#\' + \'TableSandFilter\').show();            \r\n        }" +
                    "\r\n\r\n        SP.SOD.executeOrDelayUntilScriptLoaded(loadPreviousQuery, \'sp.js\');\r" +
                    "\n\r\n    });  \r\n\r\n    function loadPreviousQuery() {\r\n        var ids = getIds();\r" +
                    "\n        var previousQuery = $(\'#\' + ids.clIdHidJsonObject).val();\r\n        if (" +
                    "previousQuery) {\r\n            OnFilterChange(ids);\r\n        }\r\n        ProcessDa" +
                    "taViewOnLoad(ids);\r\n    }\r\n\r\n    function ClearDdlListFields(ids) {\r\n        $(\'" +
                    "#\' + ids.clIdDdlListFields).val(\'\');\r\n        $(\'#\' + ids.clIdDdlListFields).tex" +
                    "t(\'\');        \r\n    }\r\n\r\n    //function getListName() {\r\n    //    var listId = " +
                    "_spPageContextInfo.pageListId;\r\n    //    var ctx = SP.ClientContext.get_current" +
                    "();\r\n    //    this.list = ctx.get_web().get_lists().getById(listId);\r\n    //   " +
                    " ctx.load(this.list);\r\n    //    ctx.executeQueryAsync(Function.createDelegate(t" +
                    "his, this.onSuccessLoadList), Function.createDelegate(this, this.onFail));      " +
                    "  \r\n    //}   \r\n\r\n    function getViewById() {\r\n        var listId = _spPageCont" +
                    "extInfo.pageListId;\r\n        var viewId;\r\n        for (var ctxKey in g_ctxDict) " +
                    "{\r\n            var curCtx = g_ctxDict[ctxKey];\r\n            if (curCtx.listName." +
                    "toString().toLowerCase() == listId.toString().toLowerCase()) {\r\n                " +
                    "viewId = curCtx.view;\r\n                break;\r\n            }\r\n        }\r\n       " +
                    " getListView(listId, viewId);       \r\n    }   \r\n\r\n    function getListView(listI" +
                    "d, viewId) {\r\n        var ctx = SP.ClientContext.get_current();\r\n        this.li" +
                    "st = ctx.get_web().get_lists().getById(listId);\r\n        ctx.load(this.list);\r\n " +
                    "       ctx.executeQueryAsync(Function.createDelegate(this, this.onSuccessLoadLis" +
                    "t), Function.createDelegate(this, this.onFail));\r\n        this.view = list.get_v" +
                    "iews().getById(viewId);        \r\n        ctx.load(this.view);\r\n        ctx.execu" +
                    "teQueryAsync(Function.createDelegate(this, this.onSuccessLoadView), Function.cre" +
                    "ateDelegate(this, this.onFail));\r\n    }\r\n\r\n    function onSuccessLoadList(sender" +
                    ", args) {\r\n        var listName = this.list.get_title();\r\n        $(\'#\' + \'");
         @__w.Write( HidSPListName.ClientID );

            @__w.Write("\').val(listName);         \r\n        $(\'#\' + \'");
         @__w.Write( TbSearchText.ClientID );

            @__w.Write("\').prop(\'disabled\', false); \r\n        $(\'#\' + \'");
         @__w.Write( TextSearchToDate.ClientID );

            @__w.Write("\').prop(\'disabled\', false); \r\n    }\r\n\r\n    function onSuccessLoadView(sender, arg" +
                    "s) {\r\n        var viewName = this.view.get_title();\r\n        var viewId = this.v" +
                    "iew.get_id();        \r\n        $(\'#\' + \'");
         @__w.Write( HidSPViewName.ClientID );

            @__w.Write("\').val(viewName); //Set hidden field to be used on server side.\r\n        $(\'#\' + " +
                    "\'");
         @__w.Write( HidCurrentViewID.ClientID );

            @__w.Write("\').val(viewId); //Set hidden for current view Id.\r\n    }\r\n\r\n    function onFail(s" +
                    "ender, args) {\r\n        alert(args.get_message());\r\n    }            \r\n\r\n    fun" +
                    "ction getIds() {\r\n        var ids = {\r\n            clIdDdlListFields: \'");
                        @__w.Write( DdlListFields.ClientID );

            @__w.Write("\',\r\n            clIdDdlComparisonOperator: \'");
                                @__w.Write( DdlComparisonOperator.ClientID );

            @__w.Write("\',\r\n            clIdlblTbSearchText: \'lblTbSearchText\',\r\n            clIdTbSearch" +
                    "Text: \'");
                       @__w.Write( TbSearchText.ClientID );

            @__w.Write("\',\r\n            clIdDivTextSearchToDate: \'DivTextSearchToDate\',\r\n            clId" +
                    "DivAppMessageError: \'AppMessageError\',\r\n            clIdTextSearchToDate: \'");
                           @__w.Write( TextSearchToDate.ClientID );

            @__w.Write("\',\r\n            clIdDivListFields: \'DivListFields\',\r\n            clIdDivLogicalPe" +
                    "rator: \'DivLogicalPerator\',\r\n            clIdDivComparisonOperator: \'DivComparis" +
                    "onOperator\',\r\n            clIdDdlLogicalOperator: \'");
                             @__w.Write( DdlLogicalOperator.ClientID );

            @__w.Write("\',\r\n            clIdHidJsonObject: \'");
                        @__w.Write( HidJsonObject.ClientID );

            @__w.Write("\',\r\n            clIdHidSPListName: \'");
                        @__w.Write( HidSPListName.ClientID );

            @__w.Write("\',\r\n            clIdHidSPViewName: \'");
                        @__w.Write( HidSPViewName.ClientID );

            @__w.Write("\',\r\n            clIdHidSiteRestUrl: \'");
                         @__w.Write( HidSiteRestUrl.ClientID );

            @__w.Write("\',\r\n            clIdHidCamlQuery: \'");
                       @__w.Write( HidCamlQuery.ClientID );

            @__w.Write("\',                        \r\n            clIdHidCurrentViewID: \'");
                           @__w.Write( HidCurrentViewID.ClientID );

            @__w.Write("\',\r\n            clIdButtonClientSideSearch: \'ButtonClientSideSearch\',\r\n          " +
                    "  clIdButtonClientSideClear: \'ButtonClientSideClear\',\r\n            clIdTblTableS" +
                    "andFilter: \'TableSandFilter\'\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    funct" +
                    "ion OnSerchQuery(ids) {\r\n        var query = BuildCamlJsQuery(ids);\r\n        if " +
                    "(query) {\r\n            $(\'#\' + ids.clIdHidCamlQuery).val(query); // Update CAML " +
                    "Query value.\r\n            UpdateCurrentView(ids, query);\r\n        }\r\n    }\r\n\r\n  " +
                    "  function OnFilterChange(ids) {\r\n        ProcessFilterStatusChange(ids);\r\n     " +
                    "   ClearEmptyFilterValues(ids);\r\n    }\r\n\r\n    function initJsonObject(ids, field" +
                    "Value) {\r\n        var array = [];\r\n        var logicalOperator = $(\'#\' + ids.clI" +
                    "dDdlLogicalOperator).val();\r\n        var comparisonOperator = $(\'#\' + ids.clIdDd" +
                    "lComparisonOperator).val();\r\n\r\n        var spField = new SelectedSPField(ids);\r\n" +
                    "        var fieldName = spField.fieldName;\r\n        var fieldType = spField.fiel" +
                    "dType;\r\n\r\n        array.push(new JsonObjectElement(logicalOperator, comparisonOp" +
                    "erator, fieldName, fieldType, fieldValue));\r\n        var jsonString = JSON.strin" +
                    "gify(array);\r\n        $(\'#\' + ids.clIdHidJsonObject).val(jsonString);\r\n        r" +
                    "eturn jsonString;\r\n    }\r\n\r\n    function ProcessJsonObjectField(ids, fieldValue)" +
                    " {\r\n        var spField = new SelectedSPField(ids);\r\n        var fieldName = spF" +
                    "ield.fieldName;\r\n        var fieldType = spField.fieldType;\r\n        var logical" +
                    "Operator = $(\'#\' + ids.clIdDdlLogicalOperator).val();\r\n        var comparisonOpe" +
                    "rator = $(\'#\' + ids.clIdDdlComparisonOperator).val();\r\n\r\n        var oldJsonStri" +
                    "ng = $(\'#\' + ids.clIdHidJsonObject).val();\r\n        var array = JSON.parse(oldJs" +
                    "onString);\r\n\r\n        var result = $.grep(array, function (e) { return e.fieldNa" +
                    "me === fieldName }); // Check if the item is already in array\r\n        if (resul" +
                    "t.length == 0) { //not found                    \r\n            array.push(new Jso" +
                    "nObjectElement(logicalOperator, comparisonOperator, fieldName, fieldType, fieldV" +
                    "alue));\r\n            var newJsonString = JSON.stringify(array);\r\n            $(\'" +
                    "#\' + ids.clIdHidJsonObject).val(newJsonString);\r\n            return newJsonStrin" +
                    "g;\r\n        } else { //Item found.  Update the data.\r\n            result[0].logi" +
                    "calOperator = logicalOperator;\r\n            result[0].comparisonOperator = compa" +
                    "risonOperator;\r\n            result[0].fieldType = fieldType;\r\n            result" +
                    "[0].fieldValue = fieldValue;\r\n\r\n            var newJsonString = JSON.stringify(a" +
                    "rray);\r\n            $(\'#\' + ids.clIdHidJsonObject).val(newJsonString);\r\n        " +
                    "    return newJsonString;\r\n        }\r\n    }\r\n\r\n    function LoadFieldsFromJsonOb" +
                    "ject(ids) {\r\n        var oldJsonString = $(\'#\' + ids.clIdHidJsonObject).val();\r\n" +
                    "        if (!oldJsonString) return false;\r\n\r\n        var spField = new SelectedS" +
                    "PField(ids);\r\n        var fieldName = spField.fieldName;\r\n        var array = JS" +
                    "ON.parse(oldJsonString);\r\n        var result = $.grep(array, function (e) { retu" +
                    "rn e.fieldName === fieldName }); // Check if the item is already in array\r\n     " +
                    "   if (result.length == 0) { //not found            \r\n            return false;\r" +
                    "\n        } else { //Item found.  Update the data.           \r\n            var lo" +
                    "gicalOperator = result[0].logicalOperator;\r\n            var comparisonOperator =" +
                    " result[0].comparisonOperator;\r\n            var fieldType = result[0].fieldType;" +
                    "\r\n            var fieldValue = result[0].fieldValue;\r\n            var cmpOpt = c" +
                    "omparisonOperator;\r\n            if (cmpOpt === \'daterange\' || cmpOpt === \'datera" +
                    "ngesoverlap\') {\r\n                var ranges = fieldValue.split(\';\');\r\n          " +
                    "      $(\'#\' + ids.clIdTbSearchText).val(ranges[0]);\r\n                $(\'#\' + ids" +
                    ".clIdTextSearchToDate).val(ranges[1]);\r\n            } else {\r\n                $(" +
                    "\'#\' + ids.clIdTbSearchText).val(fieldValue);\r\n            }\r\n            $(\'#\' +" +
                    " ids.clIdDdlLogicalOperator).val(logicalOperator);\r\n            $(\'#\' + ids.clId" +
                    "DdlComparisonOperator).val(comparisonOperator);\r\n            return true;\r\n     " +
                    "   }\r\n    }\r\n\r\n    function removeNullEmptyFromArray(arr) {\r\n        var inVal =" +
                    " $.grep(arr, function (n, i) {\r\n            return (n !== \'\' && n != null);\r\n   " +
                    "     });\r\n        return inVal;\r\n    }\r\n\r\n    function formatFilterStatusMessage" +
                    "(ids) {\r\n        var spField = new SelectedSPField(ids);\r\n        var fieldType " +
                    "= spField.fieldType;\r\n        var fieldValue = $(\'#\' + ids.clIdTbSearchText).val" +
                    "();\r\n        var cmpOpt = $(\'#\' + ids.clIdDdlComparisonOperator).val(); //Get th" +
                    "e value of the comparison operator.        \r\n        if (fieldType === \'DateTime" +
                    "\') {\r\n            if (cmpOpt === \'daterange\' || cmpOpt === \'daterangesoverlap\') " +
                    "{\r\n                fieldValue = fieldValue + \';\' + $(\'#\' + ids.clIdTextSearchToD" +
                    "ate).val(); // Get the From and To Date range values.\r\n                var jsonS" +
                    "tring = processComponentJsonObject(ids, fieldValue);\r\n                return jso" +
                    "nString;\r\n            } else if (cmpOpt === \'\' || cmpOpt === \'eq\' || cmpOpt === " +
                    "\'gt\' || cmpOpt === \'geq\' || cmpOpt === \'lt\' || cmpOpt === \'leq\') {\r\n            " +
                    "    var jsonString = processComponentJsonObject(ids, fieldValue);\r\n             " +
                    "   return jsonString;\r\n            } else {\r\n                //TODO: Add Default" +
                    " clause.\r\n                return \'TODO...\';\r\n            }\r\n        } else {\r\n  " +
                    "          var jsonString = processComponentJsonObject(ids, fieldValue);\r\n       " +
                    "     return jsonString;\r\n        }\r\n    }\r\n\r\n    function ProcessFilterStatusCha" +
                    "nge(ids) {\r\n        RemoveAllStatus();        \r\n        var message = formatFilt" +
                    "erStatusMessage(ids); //Add values to the hidden field as they are selected.\r\n  " +
                    "      UpdateStatus(\'Filter: \' + message, \'blue\');\r\n    }\r\n\r\n    function process" +
                    "ComponentJsonObject(ids, fieldValue) {\r\n        var oldJsonString = $(\'#\' + ids." +
                    "clIdHidJsonObject).val();\r\n        if (oldJsonString === \'\') {\r\n            var " +
                    "jsonString = initJsonObject(ids, fieldValue);\r\n            return jsonString;\r\n " +
                    "       } else {\r\n            var jsonString = ProcessJsonObjectField(ids, fieldV" +
                    "alue);\r\n            return jsonString;\r\n        }\r\n    }\r\n\r\n    var JsonObjectEl" +
                    "ement = function (logicalOperator, comparisonOperator, fieldName, fieldType, fie" +
                    "ldValue) {\r\n        this.fieldName = fieldName; // Like Title\r\n        this.fiel" +
                    "dType = fieldType; // Like Text\r\n        this.logicalOperator = logicalOperator;" +
                    "//  { get; set; }like <Or>, <And>\r\n        this.comparisonOperator = comparisonO" +
                    "perator; // like <Eq>, <Contains>\r\n        this.fieldValue = fieldValue;// some " +
                    "value\r\n    };\r\n\r\n    var SelectedSPField = function (ids) {\r\n        var sVal = " +
                    "$(\'#\' + ids.clIdDdlListFields).children(\'option\').filter(\':selected\').val();\r\n  " +
                    "      var sText = $(\'#\' + ids.clIdDdlListFields).children(\'option\').filter(\':sel" +
                    "ected\').text();\r\n        if (sVal) {\r\n            if (sVal.indexOf(\';\') > -1) {\r" +
                    "\n                var spListFieldAndTypeArray = sVal.split(\';\');\r\n               " +
                    " this.fieldName = spListFieldAndTypeArray[0];\r\n                this.fieldType = " +
                    "spListFieldAndTypeArray[1];\r\n                //Convert field name to proper pasc" +
                    "al case: http://stackoverflow.com/questions/196972/convert-string-to-title-case-" +
                    "with-javascript\r\n                var fieldText = toRestFieldCase(sText);\r\n      " +
                    "          /*\r\n                Preserve casing, remove spaces and keep the first " +
                    "letter of each individual word as Capital. For example a field with display name" +
                    " \"home aDdress\" will be \"HomeADdress\".\r\n                If a special character l" +
                    "ike dot is in field name or List name it is to be treated like space i.e. if fie" +
                    "ld name is \"Add.ress\" the REST equivalent will be \"AddRess\"\r\n                Sou" +
                    "rce: http://www.sharepointnadeem.com/2012/06/field-names-in-rest-query-are-case." +
                    "html\r\n                */\r\n\r\n                /*\r\n                In the regex, th" +
                    "e carrot(^) negates the match, so if the stringToReplace contains something that" +
                    " is not a-z or 0-9 it will be replaced\r\n                In this case the desired" +
                    " string will only be alpha numeric characters, stripping out spaces and symbols\r" +
                    "\n                Help from: http://stackoverflow.com/questions/4374822/javascrip" +
                    "t-regexp-remove-all-special-characters\r\n                */\r\n                var " +
                    "rExp = new RegExp(/[^a-zA-Z0-9]/gi);//White-list letters and numbers.\r\n         " +
                    "       if (fieldText === \'ID\') {                    \r\n                    this.f" +
                    "ieldNameRestFormat = toRestFieldTitleCase(fieldText); //Special case for ID.  RE" +
                    "ST version uses \'Id\' instead of \'ID\'.\r\n                } else if (rExp.test(fiel" +
                    "dText)) {//If RegEx=\"/[^a-zA-Z0-9]/gi\" evaluates to true process for special cha" +
                    "racters.\r\n                    var restVal;\r\n                    var inVal = fiel" +
                    "dText.split(rExp);//If the regex expression RegEx=\"/[^a-zA-Z0-9]/gi\" contains sp" +
                    "ecial characters, split on special character and upper-case the returned values." +
                    "  For example \'Non-itemized & Costs\' should return \'NonItemizedCosts\'\r\n         " +
                    "           $.each(inVal, function (index, element) {\r\n                        in" +
                    "Val[index] = toRestFieldCase(inVal[index]);\r\n                    });\r\n          " +
                    "          var restVal = inVal.join(\'\');\r\n                    this.fieldNameRestF" +
                    "ormat = restVal;\r\n                } else {\r\n                    var restVal = fi" +
                    "eldText.replace(rExp, \'\'); //If the regex expression RegEx=\"/[^a-zA-Z0-9]/gi\" co" +
                    "ntains any special characters, remove them.\r\n                    this.fieldNameR" +
                    "estFormat = restVal;\r\n                }                \r\n            }\r\n        " +
                    "}             \r\n    }\r\n\r\n    function toRestFieldCase(str) {\r\n        return str" +
                    ".replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.sub" +
                    "str(1); });\r\n    }\r\n\r\n    function toRestFieldTitleCase(str) {\r\n        return s" +
                    "tr.replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.s" +
                    "ubstr(1).toLowerCase(); });\r\n    }\r\n\r\n    function getQuerystring(key, default_)" +
                    " {\r\n        if (default_ == null) default_ = \'\';\r\n        key = key.replace(/[\\[" +
                    "]/, \'\\\\\\[\').replace(/[\\]]/, \'\\\\\\]\');\r\n        var regex = new RegExp(\'[\\\\?&]\' + " +
                    "key + \'=([^&#]*)\');\r\n        var qs = regex.exec(window.location.href);\r\n       " +
                    " if (qs == null)\r\n            return default_;\r\n        else\r\n            return" +
                    " qs[1];\r\n    }\r\n</script>\r\n\r\n<script type=\"text/javascript\" id=\"lblMessage\">\r\n  " +
                    "  function DdlListFields_OnChange(ddl) {\r\n        var ids = getIds();\r\n        v" +
                    "ar isEdit = LoadFieldsFromJsonObject(ids);\r\n        if (!isEdit) {\r\n            " +
                    "ClearControlValuesOnChange(ids);\r\n            ProcessFieldTypeChange(ids);\r\n    " +
                    "        OnFilterChange(ids);\r\n        } else {\r\n            ProcessFieldTypeChan" +
                    "ge(ids);\r\n        }        \r\n    }\r\n\r\n    function DdlLogicalOperator_OnChange(d" +
                    "dl) {\r\n        var ids = getIds();\r\n        OnFilterChange(ids);\r\n    }\r\n\r\n    f" +
                    "unction DdlComparisonOperator_OnChange(ddl) {\r\n        var ids = getIds();\r\n    " +
                    "    ProcessComparisonOperatorChange(ids);\r\n        OnFilterChange(ids);        \r" +
                    "\n    }\r\n\r\n    function ClearControlValuesOnChange(ids) {\r\n        $(\'#\' + ids.cl" +
                    "IdDdlLogicalOperator).val(\'\');\r\n        $(\'#\' + ids.clIdDdlLogicalOperator).sele" +
                    "ctmenu(\'refresh\');\r\n        $(\'#\' + ids.clIdDdlComparisonOperator).val(\'\');\r\n   " +
                    "     $(\'#\' + ids.clIdDdlComparisonOperator).selectmenu(\'refresh\');\r\n        $(\'#" +
                    "\' + ids.clIdTbSearchText).val(\'\'); //Clear the value on the textbox when changed" +
                    ".\r\n        $(\'#\' + ids.clIdTextSearchToDate).val(\'\'); //Clear the DateTo field.\r" +
                    "\n    }\r\n\r\n    function ProcessDataViewOnLoad(ids) {\r\n        var url = getCurren" +
                    "tListRestUrl();\r\n        $(\'#\' + ids.clIdHidSiteRestUrl).val(url); // Set the li" +
                    "st name value.        \r\n    }\r\n\r\n    function ProcessFieldTypeChange(ids) {     " +
                    "   \r\n        var spFldObj = new SelectedSPField(ids);\r\n        var field = spFld" +
                    "Obj.fieldNameRestFormat;\r\n        var fieldType = spFldObj.fieldType;  \r\n       " +
                    "\r\n        if (fieldType === \'DateTime\') {\r\n            ProcessConditionalDateTim" +
                    "eSearchFields(ids, field, fieldType);\r\n            var optionDateTime = [\'datera" +
                    "nge\', \'daterangesoverlap\', \'eq\', \'gt\', \'geq\', \'lt\', \'leq\'];\r\n            EnableS" +
                    "electOptionsByFieldType(ids, optionDateTime);\r\n        } else if (fieldType === " +
                    "\'Text\' || fieldType === \'Computed\' || fieldType === \'Note\' || fieldType === \'Cho" +
                    "ice\' || fieldType === \'User\' || fieldType === \'UserMulti\' || fieldType === \'Look" +
                    "up\') {\r\n            ProcessConditionalOtherSearchFields(ids, field, fieldType);\r" +
                    "\n            var optionText = [\'eq\', \'contains\', \'beginswith\'];\r\n            Ena" +
                    "bleSelectOptionsByFieldType(ids, optionText);\r\n        } else if (fieldType === " +
                    "\'Number\' || fieldType === \'Counter\' || fieldType === \'Currency\') {\r\n            " +
                    "ProcessConditionalOtherSearchFields(ids, field, fieldType);\r\n            var opt" +
                    "ionNumber = [\'eq\', \'gt\', \'geq\', \'lt\', \'leq\'];\r\n            EnableSelectOptionsBy" +
                    "FieldType(ids, optionNumber);\r\n        } else {\r\n            ProcessConditionalO" +
                    "therSearchFields(ids, field, fieldType);\r\n            EnableSelectOptionsByField" +
                    "Type(ids);\r\n        }\r\n    }\r\n\r\n    function ProcessComparisonOperatorChange(ids" +
                    ") {\r\n        var spFldObj = new SelectedSPField(ids);\r\n        var field = spFld" +
                    "Obj.fieldNameRestFormat;\r\n        var fieldType = spFldObj.fieldType; \r\n        " +
                    "\r\n        if (fieldType === \'DateTime\') {\r\n            ProcessConditionalDateTim" +
                    "eSearchFields(ids, field, fieldType);\r\n            var optionDateTime = [\'datera" +
                    "nge\', \'daterangesoverlap\', \'eq\', \'gt\', \'geq\', \'lt\', \'leq\'];\r\n            EnableS" +
                    "electOptionsByFieldType(ids, optionDateTime);\r\n        } else if (fieldType === " +
                    "\'Text\' || fieldType === \'Computed\' || fieldType === \'Note\' || fieldType === \'Cho" +
                    "ice\' || fieldType === \'User\' || fieldType === \'UserMulti\' || fieldType === \'Look" +
                    "up\') {\r\n            ProcessConditionalOtherSearchFields(ids, field, fieldType);\r" +
                    "\n            var optionText = [\'eq\', \'contains\', \'beginswith\'];\r\n            Ena" +
                    "bleSelectOptionsByFieldType(ids, optionText);\r\n        } else if (fieldType === " +
                    "\'Number\' || fieldType === \'Counter\' || fieldType === \'Currency\') {\r\n            " +
                    "ProcessConditionalOtherSearchFields(ids, field, fieldType);\r\n            var opt" +
                    "ionNumber = [\'eq\', \'gt\', \'geq\', \'lt\', \'leq\'];\r\n            EnableSelectOptionsBy" +
                    "FieldType(ids, optionNumber);\r\n        } else {\r\n            ProcessConditionalO" +
                    "therSearchFields(ids, field, fieldType);\r\n            EnableSelectOptionsByField" +
                    "Type(ids);\r\n        }\r\n    }\r\n\r\n    function EnableSelectOptionsByFieldType(ids," +
                    " options) {\r\n        $(function () {\r\n            if (options) {\r\n              " +
                    "  $(\'#\' + ids.clIdDdlComparisonOperator).find(\'option\').each(function () {\r\n    " +
                    "                var cmpOpt = $(this).val();\r\n                    if ($.inArray(c" +
                    "mpOpt, options) !== -1 || cmpOpt === \'\') {\r\n                        $(\'#\' + ids." +
                    "clIdDdlComparisonOperator + \" option[value=\'\" + cmpOpt + \"\']\").attr(\'disabled\', " +
                    "false);\r\n                    } else {\r\n                        $(\'#\' + ids.clIdD" +
                    "dlComparisonOperator + \" option[value=\'\" + cmpOpt + \"\']\").attr(\'disabled\', true)" +
                    ";\r\n                    }\r\n                });\r\n                $(\'#\' + ids.clIdD" +
                    "dlComparisonOperator).selectmenu(\"refresh\");\r\n            } else { // If no opti" +
                    "ons is passed, disable all.\r\n                $(\'#\' + ids.clIdDdlComparisonOperat" +
                    "or).find(\'option\').each(function () {\r\n                    var cmpOpt = $(this)." +
                    "val();\r\n                    $(\'#\' + ids.clIdDdlComparisonOperator + \" option[val" +
                    "ue=\'\" + cmpOpt + \"\']\").attr(\'disabled\', true);\r\n                });\r\n           " +
                    "     $(\'#\' + ids.clIdDdlComparisonOperator).selectmenu(\"refresh\");\r\n            " +
                    "}\r\n        });           \r\n    }\r\n\r\n    function ClearEmptyFilterValues(ids) {\r\n" +
                    "        var oldJsonString = $(\'#\' + ids.clIdHidJsonObject).val();\r\n        if (o" +
                    "ldJsonString) {\r\n            var array = JSON.parse(oldJsonString);\r\n           " +
                    " var result = $.grep(array, function (e) { return e.fieldValue !== \'\' && e.field" +
                    "Value != null && e.fieldValue !== \';\' }); // Remove empty items from list \r\n    " +
                    "        if (result.length == 0) { //No useable filter found.\r\n                Re" +
                    "moveAllStatus(); // Clear the filter \r\n                RemoveNotification(); //R" +
                    "emove notification if still running.\r\n            } else {\r\n                var " +
                    "newJsonString = JSON.stringify(result);\r\n                $(\'#\' + ids.clIdHidJson" +
                    "Object).val(newJsonString);\r\n                var message = newJsonString;\r\n     " +
                    "           UpdateStatus(\'Filter: \' + message, \'blue\');\r\n            }\r\n        }" +
                    "\r\n    }\r\n\r\n    function getCurrentListRestUrl() {\r\n        //var pathname = wind" +
                    "ow.location.pathname; // Get the end part of the path name.\r\n        //var pathn" +
                    "ameSplitArray = pathname.split(\'/\'); // Split the path to capture the list name." +
                    "\r\n        //var lstValIndex = pathnameSplitArray.length - 2; // Get the index fo" +
                    "r the list.\r\n        //var tgtListValue = pathnameSplitArray[lstValIndex]; // Ge" +
                    "t the list name\r\n        var url = \'\';\r\n        var spLstObj = new getCurrentLis" +
                    "tNames();\r\n        var tgtListName = spLstObj.listNameRestFormat; // Delete spac" +
                    "es to use with REST Service.\r\n        var siteUrl = _spPageContextInfo.webServer" +
                    "RelativeUrl;\r\n        if (siteUrl === \'/\') //This is a top level site.\r\n        " +
                    "{\r\n            url = siteUrl + \'_vti_bin/listdata.svc/\' + tgtListName + \'?\'; // " +
                    "Construct the REST Web Service URL for a top level site list.\r\n        } else {\r" +
                    "\n            url = siteUrl + \'/_vti_bin/listdata.svc/\' + tgtListName + \'?\'; // C" +
                    "onstruct the REST Web Service URL for a sub level site list.\r\n        }        \r" +
                    "\n        return url;\r\n    }\r\n\r\n    function getCurrentListNames() {\r\n        //v" +
                    "ar pathname = window.location.pathname; // Get the end part of the path name.\r\n " +
                    "       //var pathnameSplitArray = pathname.split(\'/\'); // Split the path to capt" +
                    "ure the list name.\r\n        //var lstValIndex = pathnameSplitArray.length - 2; /" +
                    "/ Get the index for the list.      \r\n        //var tgtListValue = pathnameSplitA" +
                    "rray[lstValIndex]; // Get the list name\r\n        //var hidSPListNameValue = deco" +
                    "deURIComponent(tgtListValue); // Do not delete spaces to use with SPList C# code" +
                    ".\r\n        //var tgtListName = decodeURIComponent(tgtListValue).replace(/\\s/g, \'" +
                    "\'); // Delete spaces to use with REST Service.\r\n\r\n        var hidSPListNameValue" +
                    " = $(\'#\' + \'");
                                  @__w.Write( HidSPListName.ClientID );

            @__w.Write("\').val();\r\n        var tgtListName = hidSPListNameValue.replace(/\\s/g, \'\');\r\n    " +
                    "    this.listNameWithSpaces = hidSPListNameValue;\r\n        this.listNameRestForm" +
                    "at = tgtListName;\r\n    }\r\n\r\n    var statusId = \'\';\r\n    var notifyId = \'\';\r\n    " +
                    "function AddNotification(message, sticky) {\r\n        if (notifyId == \'\') {\r\n    " +
                    "        notifyId = SP.UI.Notify.addNotification(\'<img src=\"/_layouts/images/load" +
                    "ingcirclests16.gif\" style=\"vertical-align: top;\"/> \' + message, sticky);\r\n      " +
                    "  }\r\n    }\r\n\r\n    function RemoveNotification() {\r\n        if (notifyId != \'\') {" +
                    "\r\n            SP.UI.Notify.removeNotification(notifyId);\r\n            notifyId =" +
                    " \'\';\r\n        }\r\n    }\r\n\r\n    function AddStatus(message, color) {\r\n        if (" +
                    "statusId == \'\') {\r\n            statusId = SP.UI.Status.addStatus(message); // \'b" +
                    "lue\'\r\n            SP.UI.Status.setStatusPriColor(statusId, color);\r\n        }\r\n " +
                    "   }\r\n\r\n    function UpdateStatus(message, color) {\r\n        if (statusId != \'\')" +
                    " {\r\n            SP.UI.Status.removeStatus(statusId);\r\n        }\r\n        statusI" +
                    "d = SP.UI.Status.addStatus(message); // \'blue\'\r\n        SP.UI.Status.setStatusPr" +
                    "iColor(statusId, color);\r\n        return;\r\n    }\r\n\r\n    function RemoveLastStatu" +
                    "s() {\r\n        if (statusId != \'\') {\r\n            SP.UI.Status.removeStatus(stat" +
                    "usId);\r\n            statusId = \'\';\r\n        }\r\n    }\r\n\r\n    function RemoveAllSt" +
                    "atus() {\r\n        SP.UI.Status.removeAllStatus(true);\r\n    }\r\n\r\n    function Con" +
                    "figFromAndToDatepickersWithAutocomplete(ids, field, fieldType) {\r\n        $(docu" +
                    "ment).ready(function () {\r\n            FormatTbSearchTextForFrom(ids);\r\n        " +
                    "    ConfigTbSearchTextFromDate(ids, field, fieldType);\r\n            ConfigTextSe" +
                    "archToDate(ids, field, fieldType);\r\n        });\r\n    }\r\n\r\n    function ConfigTbS" +
                    "earchTextFromDate(ids, field, fieldType) {\r\n        $(document).ready(function (" +
                    ") {\r\n            var defaultDate = \'-2w\';\r\n            var minMaxDateOpt = \'minD" +
                    "ate\';\r\n            ConfigControlForFromAndToDatepicker(ids.clIdTbSearchText, ids" +
                    ".clIdTextSearchToDate, defaultDate, minMaxDateOpt, ids);\r\n\r\n            var clId" +
                    "Auto = ids.clIdTbSearchText;\r\n            ConfigControlForAutocomplete(clIdAuto," +
                    " ids, field, fieldType);\r\n        });\r\n    }\r\n\r\n    function ConfigControlForFro" +
                    "mAndToDatepicker(clIdDatepickerFrom, clIdDatepickerTo, defaultDate, minMaxDateOp" +
                    "t, ids) {                \r\n        $(\'#\' + clIdDatepickerFrom).datepicker({\r\n   " +
                    "         inline: true,\r\n            showOn: \'button\',\r\n            defaultDate: " +
                    "defaultDate,\r\n            changeMonth: true,\r\n            changeYear: true,\r\n   " +
                    "         numberOfMonths: 3,\r\n            showButtonPanel: true,\r\n            dat" +
                    "eFormat: \'yy-mm-dd\',\r\n            onClose: function (selectedDate) {\r\n          " +
                    "      $(\'#\' + clIdDatepickerTo).datepicker(\'option\', minMaxDateOpt, selectedDate" +
                    ").next(\'button\').button({ icons: { primary: \'ui-icon-calendar\' }, text: false })" +
                    ";\r\n                OnFilterChange(ids);\r\n            }\r\n        }).next(\'button\'" +
                    ").button({\r\n            icons: {\r\n                primary: \'ui-icon-calendar\'\r\n " +
                    "           }, text: false\r\n        });\r\n    }\r\n\r\n    function ConfigControlForFr" +
                    "omOnly(clIdFrom, ids) {       \r\n        $(\'#\' + clIdFrom).datepicker({\r\n        " +
                    "    inline: true,\r\n            showOn: \'button\',\r\n            defaultDate: \'-2w\'" +
                    ",\r\n            changeMonth: true,\r\n            changeYear: true,\r\n            nu" +
                    "mberOfMonths: 3,\r\n            showButtonPanel: true,\r\n            dateFormat: \'y" +
                    "y-mm-dd\',\r\n            onClose: function (selectedDate) {\r\n                OnFil" +
                    "terChange(ids);\r\n            }\r\n        }).next(\'button\').button({\r\n            " +
                    "icons: {\r\n                primary: \'ui-icon-calendar\'\r\n            }, text: fals" +
                    "e\r\n        });\r\n    }\r\n\r\n    function removeHtmlTags(html) {\r\n        //http://s" +
                    "tackoverflow.com/questions/822452/strip-html-from-text-javascript\r\n        var t" +
                    "mp = document.createElement(\"DIV\");\r\n        tmp.innerHTML = html;\r\n        retu" +
                    "rn tmp.textContent || tmp.innerText || \"\";\r\n    }\r\n\r\n    function ConfigControlF" +
                    "orAutocomplete(clIdAuto, ids, field, fieldType) {\r\n        $(\'#\' + clIdAuto).aut" +
                    "ocomplete({            \r\n            source: function (req, add) {              " +
                    "  \r\n                var value = req.term;\r\n                value = getLastTermVa" +
                    "lue(value);\r\n                if (value) {\r\n                    var urlFilter = c" +
                    "onstructFilterString(ids, value, field, fieldType);\r\n                    if (url" +
                    "Filter) {\r\n                        var success = function (response) {\r\n        " +
                    "                    var uVals = uniqueResults(response.d.results, field, fieldTy" +
                    "pe, value);\r\n                            if (uVals) {\r\n                         " +
                    "       add(uVals);\r\n                            }\r\n                            R" +
                    "emoveNotification(); // Clear on success when it returns from the call, asynch.\r" +
                    "\n                        };\r\n                        var req = jqXhrGet(urlFilte" +
                    "r, success, field, fieldType);\r\n                        AddNotification(\'Loading" +
                    " matching values...\', true); // Give the user feedback.\r\n                    }\r\n" +
                    "                }\r\n            },\r\n            //character min length before sea" +
                    "rch.\r\n            minLength: 2,\r\n            select: function (event, ui) {\r\n   " +
                    "             var txtBoxValue = $(\'#\' + clIdAuto).val();\r\n                var sel" +
                    "Value;\r\n                if (fieldType === \'DateTime\') {\r\n                    sel" +
                    "Value = ui.item.value; // Do not add the semicolon to the end of the field for d" +
                    "ate values as you can only have one.\r\n                    $(\'#\' + clIdAuto).val(" +
                    "selValue); //set the textbox to the new value\r\n                } else if (fieldT" +
                    "ype === \'Note\') {\r\n                    var noHtmlItemValue = removeHtmlTags(ui.i" +
                    "tem.value);\r\n                    selValue = noHtmlItemValue + \';\'; //add semi to" +
                    " end if it is a text type field as you are allowed to have multiple.            " +
                    "        \r\n                    txtBoxValue = txtBoxValue.substring(0, txtBoxValue" +
                    ".lastIndexOf(\';\') + 1) + selValue; //grab only the text after the last semicolon" +
                    ".\r\n                    $(\'#\' + clIdAuto).val(txtBoxValue); //set the textbox to " +
                    "the new value\r\n                    return false; //cancel default behaviour.\r\n  " +
                    "              } else {\r\n                    selValue = ui.item.value + \';\'; //ad" +
                    "d semi to end if it is a text type field as you are allowed to have multiple.   " +
                    "                 \r\n                    txtBoxValue = txtBoxValue.substring(0, tx" +
                    "tBoxValue.lastIndexOf(\';\') + 1) + selValue; //grab only the text after the last " +
                    "semicolon.\r\n                    $(\'#\' + clIdAuto).val(txtBoxValue); //set the te" +
                    "xtbox to the new value\r\n                    return false; //cancel default behav" +
                    "iour.\r\n                }\r\n            },\r\n            close: function (event, ui" +
                    ") {\r\n                OnFilterChange(ids);                \r\n            },\r\n     " +
                    "       focus: function (event, ui) {\r\n                event.preventDefault(); //" +
                    " Prevent the default focus behavior from overwriting the item with the selection" +
                    " is made.  Use the \'Enter\' key to make the selection.\r\n            }\r\n        })" +
                    ".keyup(function (e) {            \r\n            if (e.which === 186) { // This is" +
                    " the \';\' character on the keyup event.  Close the menu when this key is typed in" +
                    "to the text box.\r\n                $(\'#\' + clIdAuto).autocomplete(\'close\');\r\n    " +
                    "        } else {\r\n                OnFilterChange(ids);\r\n            }\r\n        }" +
                    ").data(\"ui-autocomplete\")._renderItem = function (ul, item) {\r\n            var t" +
                    "hisTermValue = getLastTermValue(this.term);\r\n            var sNeedle = item.labe" +
                    "l;\r\n            //var iTermLength = this.term.length;\r\n            var iTermLeng" +
                    "th = thisTermValue.length;\r\n            var tStrPos = new Array();      //Positi" +
                    "ons of this.term in string\r\n            var iPointer = 0;\r\n            var sOutp" +
                    "ut = \'\';\r\n            //Change style here\r\n            var sPrefix = \'<strong st" +
                    "yle=\"color:#3399FF\">\';\r\n            var sSuffix = \'</strong>\';\r\n            //Fi" +
                    "nd all occurence positions            \r\n            tTemp = item.label.toString(" +
                    ").toLowerCase().split(thisTermValue.toString().toLowerCase());\r\n            var " +
                    "CharCount = 0;\r\n            tTemp[-1] = \'\';\r\n            for (i = 0; i < tTemp.l" +
                    "ength; i++) {\r\n                CharCount += tTemp[i - 1].length;\r\n              " +
                    "  tStrPos[i] = CharCount + (i * iTermLength) + tTemp[i].length\r\n            }\r\n " +
                    "           //Apply style\r\n            i = 0;\r\n            if (tStrPos.length > 0" +
                    ") {\r\n                while (iPointer < sNeedle.length) {\r\n                    if" +
                    " (i <= tStrPos.length) {\r\n                        //Needle\r\n                    " +
                    "    if (iPointer == tStrPos[i]) {\r\n                            sOutput += sPrefi" +
                    "x + sNeedle.substring(iPointer, iPointer + iTermLength) + sSuffix;\r\n            " +
                    "                iPointer += iTermLength;\r\n                            i++;\r\n    " +
                    "                    }\r\n                        else {\r\n                         " +
                    "   sOutput += sNeedle.substring(iPointer, tStrPos[i]);\r\n                        " +
                    "    iPointer = tStrPos[i];\r\n                        }\r\n                    }\r\n  " +
                    "              }\r\n            }\r\n            return $(\"<li></li>\")\r\n             " +
                    "   .data(\"item.autocomplete\", item)\r\n                .append(\"<a>\" + sOutput + \"" +
                    "</a>\")\r\n                .appendTo(ul);\r\n        };\r\n    }\r\n\r\n    function getLas" +
                    "tTermValue(term) {\r\n        var thisTermValue;\r\n        if (term.indexOf(\';\') > " +
                    "-1) {\r\n            thisTermValue = term.substring(term.lastIndexOf(\';\') + 1, ter" +
                    "m.length);\r\n        } else {\r\n            thisTermValue = term;\r\n        }\r\n    " +
                    "    return thisTermValue;\r\n    }\r\n\r\n    function ConfigTextSearchToDate(ids, fie" +
                    "ld, fieldType) {\r\n        $(document).ready(function () {\r\n            var defau" +
                    "ltDate = \'+2w\';\r\n            var minMaxDateOpt = \'maxDate\';\r\n            ConfigC" +
                    "ontrolForFromAndToDatepicker(ids.clIdTextSearchToDate, ids.clIdTbSearchText, def" +
                    "aultDate, minMaxDateOpt, ids);\r\n\r\n            var clIdAuto = ids.clIdTextSearchT" +
                    "oDate;\r\n            ConfigControlForAutocomplete(clIdAuto, ids, field, fieldType" +
                    ");\r\n\r\n        });\r\n    }\r\n\r\n    function ProcessConditionalDateTimeSearchFields(" +
                    "ids, field, fieldType) {\r\n        $(document).ready(function () {\r\n            v" +
                    "ar cmpOpt = $(\'#\' + ids.clIdDdlComparisonOperator).val(); //Get the value of the" +
                    " comparison operator.\r\n            if (cmpOpt === \'daterange\' || cmpOpt === \'dat" +
                    "erangesoverlap\') {\r\n                ConfigFromAndToDatepickersWithAutocomplete(i" +
                    "ds, field, fieldType); // the operator is not provided.  Use a From:/To: combina" +
                    "tion for the dates.\r\n            } else if (cmpOpt === \'\' || cmpOpt === \'eq\' || " +
                    "cmpOpt === \'gt\' || cmpOpt === \'geq\' || cmpOpt === \'lt\' || cmpOpt === \'leq\') {\r\n " +
                    "               FormatTbSearchTextForValue(ids); // Configure to be used with Val" +
                    "ue labels.\r\n                ConfigTbSearchTextAsDatepickerWithAutocomplete(ids, " +
                    "field, fieldType); // Configure to use as datepicker\r\n            } else {\r\n    " +
                    "            //TODO: Add Default clause.\r\n            }\r\n        });\r\n    }\r\n\r\n  " +
                    "  function FormatTbSearchTextForValue(ids) {\r\n        $(document).ready(function" +
                    " () {\r\n            $(\'#\' + ids.clIdDivTextSearchToDate).hide(\'slide\', { directio" +
                    "n: \'left\' }, 350);\r\n            $(\'#\' + ids.clIdTbSearchText).datepicker(\'destro" +
                    "y\');\r\n            //$(\'#\' + ids.clIdTbSearchText).val(\'\'); // Clear\r\n           " +
                    " $(\'#\' + ids.clIdlblTbSearchText).text(\'Value:\');\r\n            $(\'#\' + ids.clIdT" +
                    "extSearchToDate).datepicker(\'destroy\');\r\n            //$(\'#\' + ids.clIdTextSearc" +
                    "hToDate).val(\'\'); // Clear                                \r\n        });\r\n    }\r\n" +
                    "\r\n    function FormatTbSearchTextForFrom(ids) {\r\n        $(document).ready(funct" +
                    "ion () {\r\n            $(\'#\' + ids.clIdDivTextSearchToDate).show(\'slide\', { direc" +
                    "tion: \'left\' }, 350);\r\n            $(\'#\' + ids.clIdTbSearchText).datepicker(\'des" +
                    "troy\');\r\n            //$(\'#\' + ids.clIdTbSearchText).val(\'\'); // Clear\r\n        " +
                    "    $(\'#\' + ids.clIdlblTbSearchText).text(\'From:\');\r\n            //$(\'#\' + ids.c" +
                    "lIdTextSearchToDate).val(\'\'); // Clear         \r\n        });\r\n    }\r\n\r\n    funct" +
                    "ion ConfigTbSearchTextAsDatepickerWithAutocomplete(ids, field, fieldType) {\r\n   " +
                    "     $(document).ready(function () {\r\n            var clIdFrom = ids.clIdTbSearc" +
                    "hText;\r\n            ConfigControlForFromOnly(clIdFrom, ids);\r\n            var cl" +
                    "IdAuto = ids.clIdTbSearchText;\r\n            ConfigControlForAutocomplete(clIdAut" +
                    "o, ids, field, fieldType);\r\n        });\r\n    }\r\n\r\n    function ProcessConditiona" +
                    "lOtherSearchFields(ids, field, fieldType) {\r\n        $(document).ready(function " +
                    "() {\r\n            FormatTbSearchTextForValue(ids);\r\n            var clIdAuto = i" +
                    "ds.clIdTbSearchText;\r\n            ConfigControlForAutocomplete(clIdAuto, ids, fi" +
                    "eld, fieldType);\r\n        });\r\n    }\r\n\r\n    function isValidDate(value) {\r\n     " +
                    "   var rExDtYr = /^[12][0-9]{3}$/;\r\n        this.isValidYear = rExDtYr.test(valu" +
                    "e);\r\n        var rExDtYrMt = /^\\d{4}(\\-|\\/|\\.)\\d{1,2}$/;\r\n        this.isValidYe" +
                    "arMonth = rExDtYrMt.test(value);\r\n        var rExDtYrMtDy = /^\\d{4}(\\-|\\/|\\.)\\d{" +
                    "1,2}\\1\\d{1,2}$/;\r\n        this.isValidYearMonthDay = rExDtYrMtDy.test(value);\r\n\r" +
                    "\n        var array = value.split(\'-\');\r\n        this.Year = array[0];\r\n        t" +
                    "his.Month = array[1];\r\n        this.Day = array[2];\r\n    }\r\n\r\n    function const" +
                    "ructFilterString(ids, value, field, fieldType) {\r\n        value = value.substrin" +
                    "g(value.lastIndexOf(\';\') + 1);\r\n        var url = getCurrentListRestUrl();\r\n    " +
                    "    var urlFilter;\r\n        var filter = \'$filter=\';\r\n        var topCount = \'32" +
                    "\'; // Top count.\r\n        var top = \'&$top=\';\r\n        var orderBy = \'&$orderby=" +
                    "\';\r\n        var select = \'&$select=\';\r\n        var expand = \'&$expand=\';\r\n      " +
                    "  var pfxValue = \'Value\';  //REST Format uses the field name and appends \'Value\'" +
                    " to the field to expand choice values.\r\n        var pfxName = \'Name\';\r\n        v" +
                    "ar pfxTitle = \'Title\';\r\n        var pfxId = \'Id\';\r\n        var inLineCountAllPag" +
                    "es = \'&$inlinecount=allpages\';\r\n        var eq = \'+eq+\';\r\n        var ge = \'+ge+" +
                    "\';\r\n        var le = \'+le+\';\r\n        var and = \'+and+\';\r\n        var dateTimeFi" +
                    "lter = \'DateTime\';\r\n        var yearFilter = \'year\';\r\n        var monthFilter = " +
                    "\'month\';\r\n        var dayFilter = \'day\';\r\n        var singleQuote = \"\'\";\r\n      " +
                    "  var str01 = \'01\'\r\n        var dateSep = \'-\';\r\n        var comma = \',\';\r\n      " +
                    "  var openParen = \'(\';\r\n        var closeParen = \')\';\r\n        var fwdSlash = \'/" +
                    "\';\r\n        var startsWith = \'startswith\';\r\n        var subStrOf = \'substringof\'" +
                    ";\r\n        var asc = \'+asc+\';\r\n        var desc = \'+desc+\'\r\n        var columnSe" +
                    "lectLimitAscString = select + field + orderBy + field + asc + top + topCount + i" +
                    "nLineCountAllPages;\r\n        var urlFilter;\r\n        var cmpOpt = $(\'#\' + ids.cl" +
                    "IdDdlComparisonOperator).val();\r\n        if (fieldType === \'Text\' || fieldType =" +
                    "== \'Computed\' || fieldType === \'Note\' || fieldType === \'Choice\' || fieldType ===" +
                    " \'User\' || fieldType === \'UserMulti\' || fieldType === \'Lookup\') {\r\n            i" +
                    "f (fieldType === \'Choice\') {                \r\n                if (cmpOpt === \'be" +
                    "ginswith\') {\r\n                    urlFilter = url + filter + startsWith + openPa" +
                    "ren + field + pfxValue + comma + singleQuote + value + singleQuote + closeParen " +
                    "+ expand + field + columnSelectLimitAscString;\r\n                } else {\r\n      " +
                    "              urlFilter = url + filter + subStrOf + openParen + singleQuote + va" +
                    "lue + singleQuote + comma + field + pfxValue + closeParen + expand + field + col" +
                    "umnSelectLimitAscString;\r\n                }\r\n                return urlFilter;\r\n" +
                    "            } else if (fieldType === \'User\') {\r\n                columnSelectLimi" +
                    "tAscString = select + field + fwdSlash + pfxName + comma + field + fwdSlash + pf" +
                    "xId + orderBy + field + fwdSlash + pfxName + asc + top + topCount + inLineCountA" +
                    "llPages;\r\n                if (cmpOpt === \'beginswith\') {\r\n                    ur" +
                    "lFilter = url + filter + startsWith + openParen + field + fwdSlash + pfxName + c" +
                    "omma + singleQuote + value + singleQuote + closeParen + expand + field + columnS" +
                    "electLimitAscString;                 \r\n                } else {\r\n               " +
                    "     urlFilter = url + filter + subStrOf + openParen + singleQuote + value + sin" +
                    "gleQuote + comma + field + fwdSlash + pfxName + closeParen + expand + field + co" +
                    "lumnSelectLimitAscString;                    \r\n                }\r\n              " +
                    "  return urlFilter;\r\n            } else if (fieldType === \'UserMulti\') {\r\n      " +
                    "          columnSelectLimitAscString = select + field + fwdSlash + pfxName + com" +
                    "ma + field + fwdSlash + pfxId;\r\n                urlFilter = url + expand + field" +
                    " + columnSelectLimitAscString;\r\n                return urlFilter;\r\n            }" +
                    " else if (fieldType === \'Lookup\') {                \r\n                columnSelec" +
                    "tLimitAscString = select + field + fwdSlash + pfxTitle + comma + field + fwdSlas" +
                    "h + pfxId + orderBy + field + fwdSlash + pfxTitle + asc + top + topCount + inLin" +
                    "eCountAllPages;\r\n                if (cmpOpt === \'beginswith\') {\r\n               " +
                    "     urlFilter = url + filter + startsWith + openParen + field + fwdSlash + pfxT" +
                    "itle + comma + singleQuote + value + singleQuote + closeParen + expand + field +" +
                    " columnSelectLimitAscString;                    \r\n                } else {\r\n    " +
                    "                urlFilter = url + filter + subStrOf + openParen + singleQuote + " +
                    "value + singleQuote + comma + field + fwdSlash + pfxTitle + closeParen + expand " +
                    "+ field + columnSelectLimitAscString;\r\n                }\r\n                return" +
                    " urlFilter;\r\n            } else {\r\n                if (cmpOpt === \'beginswith\') " +
                    "{\r\n                    urlFilter = url + filter + startsWith + openParen + field" +
                    " + comma + singleQuote + value + singleQuote + closeParen + columnSelectLimitAsc" +
                    "String;\r\n                } else {\r\n                    urlFilter = url + filter " +
                    "+ subStrOf + openParen + singleQuote + value + singleQuote + comma + field + clo" +
                    "seParen + columnSelectLimitAscString;\r\n                }\r\n                return" +
                    " urlFilter;\r\n            }            \r\n        } else if (fieldType === \'DateTi" +
                    "me\') {\r\n            var dt = new isValidDate(value);\r\n            if (cmpOpt ===" +
                    " \'daterange\' || cmpOpt === \'daterangesoverlap\' || cmpOpt === \'\' || cmpOpt === \'e" +
                    "q\' || cmpOpt === \'gt\' || cmpOpt === \'geq\' || cmpOpt === \'lt\' || cmpOpt === \'leq\'" +
                    ") {\r\n                if (dt.isValidYear) { // The year is only included on typed" +
                    " text\r\n                    urlFilter = url + filter + field + ge + dateTimeFilte" +
                    "r + singleQuote + dt.Year + dateSep + str01 + dateSep + str01 + singleQuote + co" +
                    "lumnSelectLimitAscString;\r\n                    return urlFilter;\r\n              " +
                    "  } else if (dt.isValidYearMonth) { // Year and Month provided.\r\n               " +
                    "     var monthVal = dt.Month; //monthVal = monthVal.replace(/^0+/, \'\'); removes " +
                    "the leading zero.\r\n                    urlFilter = url + filter + field + ge + d" +
                    "ateTimeFilter + singleQuote + dt.Year + dateSep + monthVal + dateSep + str01 + s" +
                    "ingleQuote + columnSelectLimitAscString;\r\n                    return urlFilter;\r" +
                    "\n                } else { // Complete date is included format: 2016-02-08.  Allo" +
                    "ws to filter by year, month, day.\r\n                    urlFilter = url + filter " +
                    "+ field + ge + dateTimeFilter + singleQuote + value + singleQuote + columnSelect" +
                    "LimitAscString;\r\n                    return urlFilter;\r\n                }\r\n     " +
                    "       }\r\n        } else if (fieldType === \'Number\' || fieldType === \'Counter\' |" +
                    "| fieldType === \'Currency\') {\r\n            if (cmpOpt === \'lt\' || cmpOpt === \'le" +
                    "q\') {\r\n                urlFilter = url + filter + field + le + value + columnSel" +
                    "ectLimitAscString;\r\n            } else {\r\n                urlFilter = url + filt" +
                    "er + field + ge + value + columnSelectLimitAscString;\r\n            }           \r" +
                    "\n            return urlFilter;\r\n        }\r\n    }\r\n\r\n    function TextFieldContai" +
                    "nsCamlQueryBuild(inVal, fieldName, lgcOpt, xml, isNewQuery) {\r\n        var query" +
                    ";\r\n        $.each(inVal, function (index, element) {//More than one contains val" +
                    "ue provided\r\n            if (index == 0 && isNewQuery) {//Build first contains.\r" +
                    "\n                xml = new CamlBuilder().View().Query().Where().TextField(fieldN" +
                    "ame).Contains(inVal[index]).ToString(); // Will occur on the first item.\r\n      " +
                    "      } else {//Add other contains.\r\n                if (lgcOpt === \'or\' || lgcO" +
                    "pt === \'\') {\r\n                    query = CamlBuilder.FromXml(xml).ModifyWhere()" +
                    ".AppendOr().TextField(fieldName).Contains(inVal[index]).ToString();\r\n           " +
                    "         xml = query; //Continue to add or(s) if there are multiple contains in " +
                    "the array.\r\n                } else {\r\n                    query = CamlBuilder.Fr" +
                    "omXml(xml).ModifyWhere().AppendAnd().TextField(fieldName).Contains(inVal[index])" +
                    ".ToString();\r\n                    xml = query; //Continue to add and(s) if there" +
                    " are multiple contains in the array.\r\n                }\r\n            }\r\n        " +
                    "});\r\n        return xml;\r\n    }\r\n\r\n    function TextFieldCamlQueryBuild(inVal, f" +
                    "ieldName, lgcOpt, cmpOpt, xml, isNewQuery) {\r\n        var query;\r\n        if (cm" +
                    "pOpt === \'eq\') {\r\n            $.each(inVal, function (index, element) {//More th" +
                    "an one eq value provided\r\n                if (index == 0 && isNewQuery) {//Build" +
                    " first eq.\r\n                    xml = new CamlBuilder().View().Query().Where().T" +
                    "extField(fieldName).EqualTo(inVal[index]).ToString(); // Will occur on the first" +
                    " item.\r\n                } else {//Add other contains.\r\n                    if (l" +
                    "gcOpt === \'or\' || lgcOpt === \'\') {\r\n                        query = CamlBuilder." +
                    "FromXml(xml).ModifyWhere().AppendOr().TextField(fieldName).EqualTo(inVal[index])" +
                    ".ToString();\r\n                        xml = query; //Continue to add or(s) if th" +
                    "ere are multiple eq in the array.\r\n                    } else {\r\n               " +
                    "         query = CamlBuilder.FromXml(xml).ModifyWhere().AppendAnd().TextField(fi" +
                    "eldName).EqualTo(inVal[index]).ToString();\r\n                        xml = query;" +
                    " //Continue to add and(s) if there are multiple eq in the array.\r\n              " +
                    "      }\r\n                }\r\n            });\r\n        } else if (cmpOpt === \'begi" +
                    "nswith\') {\r\n            $.each(inVal, function (index, element) {//More than one" +
                    " beginswith value provided\r\n                if (index == 0 && isNewQuery) {//Bui" +
                    "ld first contains. \r\n                    xml = new CamlBuilder().View().Query()." +
                    "Where().TextField(fieldName).BeginsWith(inVal[index]).ToString();\r\n             " +
                    "   } else {//Add other beginswith.\r\n                    if (lgcOpt === \'or\' || l" +
                    "gcOpt === \'\') {\r\n                        query = CamlBuilder.FromXml(xml).Modify" +
                    "Where().AppendOr().TextField(fieldName).BeginsWith(inVal[index]).ToString();\r\n  " +
                    "                      xml = query; //Continue to add or(s) if there are multiple" +
                    " beginswith in the array. Or is the only possible choice as there is only begins" +
                    "with per item.\r\n                    } else {\r\n                        query = Ca" +
                    "mlBuilder.FromXml(xml).ModifyWhere().AppendAnd().TextField(fieldName).BeginsWith" +
                    "(inVal[index]).ToString();\r\n                        xml = query; //Continue to a" +
                    "dd or(s) if there are multiple beginswith in the array. Or is the only possible " +
                    "choice as there is only beginswith per item.\r\n                    }\r\n           " +
                    "     }\r\n            });\r\n        } else {\r\n            xml = TextFieldContainsCa" +
                    "mlQueryBuild(inVal, fieldName, lgcOpt, xml, isNewQuery);\r\n        }\r\n        ret" +
                    "urn xml; \r\n    }\r\n\r\n    function DateFieldCamlQueryBuild(inVal, fieldName, dateF" +
                    "rom, dateTo, lgcOpt, cmpOpt, xml, isNewQuery) {\r\n        var query;\r\n        if " +
                    "(cmpOpt === \'daterange\' || cmpOpt === \'daterangesoverlap\') {\r\n            if (in" +
                    "Val.length === 2 && dateFrom !== \'\' && dateTo !== \'\') { // There are date from a" +
                    "nd to values.\r\n                if (isNewQuery) {\r\n                    xml = new " +
                    "CamlBuilder().View().Query().Where().DateField(fieldName).GreaterThanOrEqualTo(d" +
                    "ateFrom).And().DateField(fieldName).LessThanOrEqualTo(dateTo).ToString();\r\n     " +
                    "           } else {\r\n                    query = CamlBuilder.FromXml(xml).Modify" +
                    "Where().AppendOr().DateField(fieldName).GreaterThanOrEqualTo(dateFrom).And().Dat" +
                    "eField(fieldName).LessThanOrEqualTo(dateTo).ToString();\r\n                }      " +
                    "          \r\n            } else { //Only one date provided.\r\n                if (" +
                    "isNewQuery) {\r\n                    xml = new CamlBuilder().View().Query().Where(" +
                    ").DateField(fieldName).EqualTo(inVal).ToString();\r\n                } else {\r\n   " +
                    "                 query = CamlBuilder.FromXml(xml).ModifyWhere().AppendOr().DateF" +
                    "ield(fieldName).EqualTo(inVal).ToString();\r\n                }               \r\n  " +
                    "          }\r\n        } else { //Only one date provided.\r\n            if (isNewQu" +
                    "ery) {\r\n                xml = new CamlBuilder().View().Query().Where().DateField" +
                    "(fieldName).EqualTo(inVal).ToString();\r\n            } else {\r\n                qu" +
                    "ery = CamlBuilder.FromXml(xml).ModifyWhere().AppendOr().DateField(fieldName).Equ" +
                    "alTo(inVal).ToString();\r\n            }\r\n        }\r\n        return xml;\r\n    }\r\n\r" +
                    "\n    function NumberFieldCamlQueryBuild(inVal, fieldName, lgcOpt, cmpOpt, xml, i" +
                    "sNewQuery) {\r\n        var query;\r\n        if (cmpOpt === \'gt\') {\r\n            $." +
                    "each(inVal, function (index, element) {//More than one gt value provided\r\n      " +
                    "          if (index == 0 && isNewQuery) {//Build first contains. \r\n             " +
                    "       xml = new CamlBuilder().View().Query().Where().NumberField(fieldName).Gre" +
                    "aterThan(inVal[index]).ToString();\r\n                } else {//Add other greater " +
                    "than.\r\n                    if (lgcOpt === \'or\' || lgcOpt === \'\') {\r\n            " +
                    "            query = CamlBuilder.FromXml(xml).ModifyWhere().AppendOr().NumberFiel" +
                    "d(fieldName).GreaterThan(inVal[index]).ToString();\r\n                        xml " +
                    "= query; //Continue to add or(s) if there are multiple greater than in the array" +
                    ". Or is the only possible choice as there is only beginswith per item.\r\n        " +
                    "            } else {\r\n                        query = CamlBuilder.FromXml(xml).M" +
                    "odifyWhere().AppendAnd().NumberField(fieldName).GreaterThan(inVal[index]).ToStri" +
                    "ng();\r\n                        xml = query; //Continue to add or(s) if there are" +
                    " multiple greater than in the array. Or is the only possible choice as there is " +
                    "only beginswith per item.\r\n                    }\r\n                }\r\n           " +
                    " });\r\n        } else if (cmpOpt === \'geq\') {\r\n            $.each(inVal, function" +
                    " (index, element) {//More than one gt value provided\r\n                if (index " +
                    "== 0 && isNewQuery) {//Build first contains. \r\n                    xml = new Cam" +
                    "lBuilder().View().Query().Where().NumberField(fieldName).GreaterThanOrEqualTo(in" +
                    "Val[index]).ToString();\r\n                } else {//Add other greater than.\r\n    " +
                    "                if (lgcOpt === \'or\' || lgcOpt === \'\') {\r\n                       " +
                    " query = CamlBuilder.FromXml(xml).ModifyWhere().AppendOr().NumberField(fieldName" +
                    ").GreaterThanOrEqualTo(inVal[index]).ToString();\r\n                        xml = " +
                    "query; //Continue to add or(s) if there are multiple greater than or equal in th" +
                    "e array. Or is the only possible choice as there is only beginswith per item.\r\n " +
                    "                   } else {\r\n                        query = CamlBuilder.FromXml" +
                    "(xml).ModifyWhere().AppendAnd().NumberField(fieldName).GreaterThanOrEqualTo(inVa" +
                    "l[index]).ToString();\r\n                        xml = query; //Continue to add or" +
                    "(s) if there are multiple greater than or equal in the array. Or is the only pos" +
                    "sible choice as there is only beginswith per item.\r\n                    }\r\n     " +
                    "           }\r\n            });\r\n        } else if (cmpOpt === \'lt\') {\r\n          " +
                    "  $.each(inVal, function (index, element) {//More than one gt value provided\r\n  " +
                    "              if (index == 0 && isNewQuery) {//Build first contains. \r\n         " +
                    "           xml = new CamlBuilder().View().Query().Where().NumberField(fieldName)" +
                    ".LessThan(inVal[index]).ToString();\r\n                } else {//Add other greater" +
                    " than.\r\n                    if (lgcOpt === \'or\' || lgcOpt === \'\') {\r\n           " +
                    "             query = CamlBuilder.FromXml(xml).ModifyWhere().AppendOr().NumberFie" +
                    "ld(fieldName).LessThan(inVal[index]).ToString();\r\n                        xml = " +
                    "query; //Continue to add or(s) if there are multiple less than in the array. Or " +
                    "is the only possible choice as there is only beginswith per item.\r\n             " +
                    "       } else {\r\n                        query = CamlBuilder.FromXml(xml).Modify" +
                    "Where().AppendAnd().NumberField(fieldName).LessThan(inVal[index]).ToString();\r\n " +
                    "                       xml = query; //Continue to add or(s) if there are multipl" +
                    "e less than in the array. Or is the only possible choice as there is only begins" +
                    "with per item.\r\n                    }\r\n                }\r\n            });\r\n     " +
                    "   } else if (cmpOpt === \'leq\') {\r\n            $.each(inVal, function (index, el" +
                    "ement) {//More than one gt value provided\r\n                if (index == 0 && isN" +
                    "ewQuery) {//Build first contains. \r\n                    xml = new CamlBuilder()." +
                    "View().Query().Where().NumberField(fieldName).LessThanOrEqualTo(inVal[index]).To" +
                    "String();\r\n                } else {//Add other greater than.\r\n                  " +
                    "  if (lgcOpt === \'or\' || lgcOpt === \'\') {\r\n                        query = CamlB" +
                    "uilder.FromXml(xml).ModifyWhere().AppendOr().NumberField(fieldName).LessThanOrEq" +
                    "ualTo(inVal[index]).ToString();\r\n                        xml = query; //Continue" +
                    " to add or(s) if there are multiple less than or equal in the array. Or is the o" +
                    "nly possible choice as there is only beginswith per item.\r\n                    }" +
                    " else {\r\n                        query = CamlBuilder.FromXml(xml).ModifyWhere()." +
                    "AppendAnd().NumberField(fieldName).LessThanOrEqualTo(inVal[index]).ToString();\r\n" +
                    "                        xml = query; //Continue to add or(s) if there are multip" +
                    "le less than or equal in the array. Or is the only possible choice as there is o" +
                    "nly beginswith per item.\r\n                    }\r\n                }\r\n            " +
                    "});\r\n        } else {\r\n            xml = new CamlBuilder().View().Query().Where(" +
                    ").NumberField(fieldName).In(inVal).ToString();\r\n        }\r\n        return xml;\r\n" +
                    "    }\r\n     \r\n    function CamlJsQueryBuildItems(array) {\r\n        var xml;\r\n   " +
                    "     $.each(array, function (index, element) {\r\n            var fieldName = elem" +
                    "ent.fieldName;\r\n            var fieldType = element.fieldType;\r\n            var " +
                    "fieldValue = element.fieldValue;\r\n            var lgcOpt = element.logicalOperat" +
                    "or;\r\n            var cmpOpt = element.comparisonOperator;\r\n            if (field" +
                    "Value) {\r\n                var arr;\r\n                var inVal;\r\n                " +
                    "var dateFrom, dateTo;\r\n                if (fieldValue.indexOf(\';\') > -1) {\r\n    " +
                    "                arr = fieldValue.split(\';\');\r\n                    inVal = remove" +
                    "NullEmptyFromArray(arr);\r\n                } else {\r\n                    arr = ne" +
                    "w Array(fieldValue);\r\n                    inVal = arr;\r\n                }       " +
                    "         \r\n                dateFrom = inVal[0];\r\n                dateTo = inVal[" +
                    "1];\r\n                if (index == 0) {//Build firt element. \r\n                  " +
                    "  var isNewQuery = true; //Build the new query on the first item.               " +
                    "     \r\n                } else {\r\n                    var isNewQuery = false; //I" +
                    "t is not a new query, add to subsequent queries.                                " +
                    "  \r\n                } // index == 0\r\n                               \r\n          " +
                    "      if (fieldType === \'Text\' || fieldType === \'Computed\' || fieldType === \'Not" +
                    "e\' || fieldType === \'Choice\' || fieldType === \'User\' || fieldType === \'UserMulti" +
                    "\' || fieldType === \'Lookup\') {\r\n                    xml = TextFieldCamlQueryBuil" +
                    "d(inVal, fieldName, lgcOpt, cmpOpt, xml, isNewQuery);\r\n                } else if" +
                    " (fieldType === \'DateTime\') {\r\n                    xml = DateFieldCamlQueryBuild" +
                    "(inVal, fieldName, dateFrom, dateTo, lgcOpt, cmpOpt, xml, isNewQuery);\r\n        " +
                    "        } else if (fieldType === \'Number\' || fieldType === \'Counter\' || fieldTyp" +
                    "e === \'Currency\') {\r\n                    xml = NumberFieldCamlQueryBuild(inVal, " +
                    "fieldName, lgcOpt, cmpOpt, xml, isNewQuery);\r\n                } else {\r\n        " +
                    "            xml = TextFieldCamlQueryBuild(inVal, fieldName, lgcOpt, cmpOpt, xml," +
                    " isNewQuery); // Default, using TextField.\r\n                }\r\n            } // " +
                    "fieldValue\r\n        });\r\n        return xml;\r\n    }\r\n\r\n    function BuildCamlJsQ" +
                    "uery(ids) {\r\n        var oldJsonString = $(\'#\' + ids.clIdHidJsonObject).val();\r\n" +
                    "        if (!oldJsonString) return false;\r\n        var array = JSON.parse(oldJso" +
                    "nString);        \r\n        var xml, innerWhereQuery;\r\n        xml = CamlJsQueryB" +
                    "uildItems(array);        \r\n        if (xml) {            \r\n            xml = xml" +
                    ".replace(\'<View><Query>\', \'\'); //Remove tags so view works corretly with view fo" +
                    "rmat.\r\n            innerWhereQuery = xml.replace(\'</Query></View>\', \'\');\r\n      " +
                    "  }       \r\n        return innerWhereQuery;\r\n    }\r\n\r\n    function isNumeric(n) " +
                    "{\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    // jQuery " +
                    "XMLHTTPRequest GET\r\n    function jqXhrGet(url, success, field, fieldType) {     " +
                    "   \r\n        return $.ajax({\r\n            url: url,\r\n            method: \'GET\',\r" +
                    "\n            headers: { \'Accept\': \'application/json; odata=verbose\' },\r\n        " +
                    "    success: success\r\n        });\r\n    }\r\n\r\n    function uniqueResults(results, " +
                    "field, fieldType, value) {        \r\n        var uVals = [];                \r\n   " +
                    "     $.each(results, function (index, element) {\r\n            if (fieldType === " +
                    "\'DateTime\') {\r\n                var dateStr = jsonDateToJsDateFormat(element[fiel" +
                    "d], \'yy-mm-dd\');\r\n                if ($.inArray(dateStr, uVals) === -1) {\r\n     " +
                    "               uVals.push(dateStr);\r\n                }\r\n            } else if (f" +
                    "ieldType === \'Choice\') {\r\n                var choiceStr = element[field].Value.t" +
                    "oString();\r\n                if ($.inArray(choiceStr, uVals) === -1) {\r\n         " +
                    "           uVals.push(choiceStr);\r\n                }\r\n            } else if (fie" +
                    "ldType === \'User\') {\r\n                var userStr = element[field].Name.toString" +
                    "();\r\n                if ($.inArray(userStr, uVals) === -1) {\r\n                  " +
                    "  uVals.push(userStr);\r\n                }\r\n            } else if (fieldType === " +
                    "\'Lookup\') {\r\n                var lookupStr = element[field].Title.toString();\r\n " +
                    "               if ($.inArray(lookupStr, uVals) === -1) {\r\n                    uV" +
                    "als.push(lookupStr);\r\n                }\r\n            } else if (fieldType === \'U" +
                    "serMulti\') {\r\n                var multiUsrvals = [];\r\n                multiUsrva" +
                    "ls = element[field].results;\r\n                if (multiUsrvals.length > 0) {\r\n  " +
                    "                  var usrMulti = [];\r\n                    $.each(multiUsrvals, f" +
                    "unction (i, e) {\r\n                        usrMulti.push(e.Name);\r\n              " +
                    "      });\r\n                    var fldVal = usrMulti.join(\';\').toString();\r\n    " +
                    "                var usrJoin = fldVal.toLowerCase();\r\n                    var eVa" +
                    "l = value.toLowerCase();\r\n                    if (usrJoin.indexOf(eVal) > -1) {\r" +
                    "\n                        if ($.inArray(fldVal, uVals) === -1) {\r\n               " +
                    "             uVals.push(fldVal);                            \r\n                  " +
                    "      }                        \r\n                    }\r\n                }\r\n     " +
                    "       } else {\r\n                var elementVal = element[field].toString();\r\n  " +
                    "              if ($.inArray(elementVal, uVals) === -1) {\r\n                    uV" +
                    "als.push(elementVal);\r\n                }\r\n            }\r\n        });\r\n        re" +
                    "turn uVals;\r\n    }\r\n        \r\n    function jsonDateToJsDateFormat(dateElement, f" +
                    "ormat) {\r\n        var date = new Date(parseInt(dateElement.substring(6)));\r\n    " +
                    "    var dateStr = $.datepicker.formatDate(format, date);\r\n        return dateStr" +
                    ";\r\n    }\r\n\r\n    function UpdateCurrentView(ids, query)\r\n    {\r\n        //creatin" +
                    "g the client context\r\n        var clientContext = new SP.ClientContext.get_curre" +
                    "nt();\r\n        if (clientContext != undefined && clientContext != null) {\r\n     " +
                    "       //get the current web\r\n            var web = clientContext.get_web();\r\n  " +
                    "          //get all lists\r\n            var listCollection = web.get_lists();\r\n  " +
                    "          var listName = $(\'#\' + ids.clIdHidSPListName).val();            \r\n    " +
                    "        var list = listCollection.getByTitle(listName);\r\n            //Use curre" +
                    "nt user information as the view name.\r\n            //get the view collection to " +
                    "add the view\r\n            var viewcollection = list.get_views();\r\n            va" +
                    "r viewName = $(\'#\' + ids.clIdHidSPViewName).val();\r\n            var view = list." +
                    "get_views().getByTitle(viewName);\r\n            if (query) {\r\n                vie" +
                    "w.set_viewQuery(query);\r\n                view.update();\r\n                clientC" +
                    "ontext.load(view);\r\n                //execute the operation async - call onCreat" +
                    "eUpdateViewQueryFailed on errors and onCreateUpdateViewQuerySucceeded on success" +
                    "\r\n                clientContext.executeQueryAsync(Function.createDelegate(this, " +
                    "this.onSuccessUpdateViewQuery), Function.createDelegate(this, this.onFailQueryNo" +
                    "tProcessed));\r\n            }                        \r\n        }\r\n    }\r\n\r\n    fu" +
                    "nction ClearCurrentView(ids)\r\n    {\r\n        //creating the client context\r\n    " +
                    "    var clientContext = new SP.ClientContext.get_current();\r\n        if (clientC" +
                    "ontext != undefined && clientContext != null) {\r\n            //get the current w" +
                    "eb\r\n            var web = clientContext.get_web();\r\n            //get all lists\r" +
                    "\n            var listCollection = web.get_lists();\r\n            var listName = $" +
                    "(\'#\' + ids.clIdHidSPListName).val();\r\n            var list = listCollection.getB" +
                    "yTitle(listName);\r\n            //Use current user information as the view name.\r" +
                    "\n            //get the view collection to add the view\r\n            var viewcoll" +
                    "ection = list.get_views();\r\n            var viewName = $(\'#\' + ids.clIdHidSPView" +
                    "Name).val();\r\n            var view = list.get_views().getByTitle(viewName);\r\n   " +
                    "         //Build the CAML query.           \r\n            var query = SP.CamlQuer" +
                    "y.createAllItemsQuery();\r\n            view.set_viewQuery(query);\r\n            vi" +
                    "ew.update();\r\n            clientContext.load(view);\r\n            //execute the o" +
                    "peration async - call onCreateUpdateViewQueryFailed on errors and onCreateUpdate" +
                    "ViewQuerySucceeded on success\r\n            clientContext.executeQueryAsync(Funct" +
                    "ion.createDelegate(this, this.onSuccessUpdateViewQuery), Function.createDelegate" +
                    "(this, this.onFailQueryNotProcessed));           \r\n        }\r\n    }\r\n\r\n    funct" +
                    "ion onSuccessUpdateViewQuery(sender, args) {\r\n        //Refresh the web part.\r\n " +
                    "       var viewId = $(\'#\' + \'");
                      @__w.Write( HidCurrentViewID.ClientID );

            @__w.Write(@"').val();
        var selectedListId = SP.ListOperation.Selection.getSelectedList();
        var convertedListId = viewId.toLowerCase().replace(""-"", ""_"").replace(""{"", """").replace(""}"", """");
        var controlId = 'ctl00$m$g_' + convertedListId + '$ctl02';
        __doPostBack(controlId, 'cancel');
        //Comment above and uncomment below to refresh the view using the native refresh button.
        //$('#ManualRefresh').parent().trigger('click');
    }

    function onFailQueryNotProcessed(sender, args) {
        alert(args.get_message());
    }

    function NotifyAppErrorMessage(message) {
        $('#' + 'AppMessageError').text(message);
    }

    function ClearAppErrorMessage() {
        $('#' + 'AppMessageError').text('');
    }
    
</script>

<div class=""ms-error"" id=""AppMessageError"" style=""width: 810px""></div>
");
            parameterContainer.Controls[5].RenderControl(@__w);
            @__w.Write("\r\n");
            parameterContainer.Controls[6].RenderControl(@__w);
            @__w.Write("\r\n");
            parameterContainer.Controls[7].RenderControl(@__w);
            @__w.Write("\r\n");
            parameterContainer.Controls[8].RenderControl(@__w);
            @__w.Write("\r\n");
            parameterContainer.Controls[9].RenderControl(@__w);
            @__w.Write("\r\n");
            parameterContainer.Controls[10].RenderControl(@__w);
            @__w.Write(@"
<script type=""text/javascript"">
    //Uncomment if restoring the originally loade jQuery version.
    //window.jQuery = jQLoaded;
    //window.$ = jQLoaded;
    //console.log('AFTER jQuery version: ' + $.fn.jquery);
</script>      
<!-- End of MY application -->
");
        }
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void InitializeControl() {
            this.@__BuildControlTree(this);
            this.Load += new global::System.EventHandler(this.Page_Load);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected virtual object Eval(string expression) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected virtual string Eval(string expression, string format) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression, format);
        }
    }
}
